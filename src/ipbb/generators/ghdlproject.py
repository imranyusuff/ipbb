import time
import os

from os.path import join, split, exists, splitext, abspath
from ..utils import SmartOpen
from .ipcoressim import find_ip_sim_src

# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------





class GHDLGenerator(object):
    # --------------------------------------------------------------
    def __init__(self, aProjInfo, aSimLibrary, aIPProjName, aTurbo=True, aUseSynopsys=False):
        self.projInfo = aProjInfo
        self.simLibrary = aSimLibrary
        self.ipProjName = aIPProjName
        self.turbo = aTurbo
        self.useSynopsys = aUseSynopsys

    # --------------------------------------------------------------
    def write(self, aTarget, aSettings, aComponentPaths, aCommandList, aLibs):

        # ----------------------------------------------------------
        # FIXME: Temp assignments
        write = aTarget
        lIPProjDir = abspath(join(self.projInfo.path, self.ipProjName))
        # ----------------------------------------------------------

        # ----------------------------------------------------------
        write('# Autogenerated project build script')
        write(time.strftime('# %c'))
        write()

        for setup in (c for c in aCommandList['setup'] if not c.finalize):
            write('source {0}'.format(setup.filepath))

        libspec = ''
        for lib in set(aLibs):
            libspec += f'-P{lib} '

        lSrcs = aCommandList['src']

        lSrcCommandGroups = []
        # ----------------------------------------------------------
        for src in lSrcs:

            lPath, lBasename = split(src.filepath)
            lName, lExt = splitext(lBasename)

            file = src.filepath

            # ----------------------------------------------------------
            if splitext(file)[1] in ['.vhd', '.vhdl']:
                cmd = 'ghdl -a'
                if src.vhdl2008:
                    cmd = f'{cmd} --std=08'
            #elif splitext(file)[1] == '.v':
            #    cmd = 'vlog'

            else:
                print(f'# IGNORING unknown source file type in GHDL build: {src.filepath}')
                continue

            # ----------------------------------------------------------

            if src.simflags:
                cmd = f'{cmd} {src.simflags}'
            # ----------------------------------------------------------

            lib = src.lib if src.lib else self.simLibrary
            cmd = f'{cmd} --work={lib} --workdir={lib} {libspec}'

            if self.useSynopsys:
               cmd = f'{cmd} -fsynopsys'
            # ----------------------------------------------------------

            if self.turbo:
                # In turbo mode group compilation commands together
                if not lSrcCommandGroups or lSrcCommandGroups[-1]['cmd'] != cmd:
                    lSrcCommandGroups.append( {'cmd': cmd, 'files': [file]} )
                else:
                    lSrcCommandGroups[-1]['files'].append(file)

            else:
                # execute them immediately when turbo is disabled instead
                write(f'{cmd} {file}')
            # ----------------------------------------------------------

        if self.turbo:
            # for cmd, files in lSrcCommandGroups.items():
            for item in lSrcCommandGroups:
                write(f'{item["cmd"]} {" ".join(item["files"])}')

        # TODO elaborate here
        #write(f'ghdl -e --workdir={self.simLibrary} {libspec} -fsynopsys top')

        for setup in (c for c in aCommandList['setup'] if c.finalize):
            write(f'source {setup.filepath}')

# --------------------------------------------------------------

# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
